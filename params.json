{"name":"Processing.py","tagline":"Write Processing sketches in Python","body":"# processing.py #\r\n\r\nWrite real [Processing](http://processing.org/) sketches in Python.\r\n\r\n  * Based on [Processing 2.0](http://processing.org/), and compatible with most [3rd party libraries](http://www.processing.org/reference/libraries/).\r\n  * Source compatible with [Python 2.7.3](http://python.org).\r\n\r\nTested on Mac OS 10.8 & 10.9, Windows XP, 7 & 8, and Ubuntu 12.10.\r\n\r\n## Quick Start ##\r\n\r\n### Download Processing.py 0202 ###\r\n\r\n- [Mac OS X (83M)](http://py.processing.org/processing.py-0202-macosx.tgz)\r\n- [Windows x64 (74M)](http://py.processing.org/processing.py-0202-windows64.zip)\r\n- [Windows x32 (72M)](http://py.processing.org/processing.py-0202-windows32.zip)\r\n- [Linux x64 (68M)](http://py.processing.org/processing.py-0202-linux64.tgz)\r\n- [Linux x32 (69M)](http://py.processing.org/processing.py-0202-linux32.tgz)\r\n\r\nThen, paste this code into a file, e.g., `mysketch.py`.\r\n\r\n\tdef setup():\r\n\t    size(600, 400)\r\n\r\n\tdef draw():\r\n\t    ellipse(mouseX, mouseY, 10, 10)\r\n\r\nDrag and drop your sketch onto one of these files, according to your platform:\r\n\r\n<img src=\"http://py.processing.org/howtolaunch.jpg\"/>\r\n\r\nYou can also run the sketch from the command line, either with the included launcher script:\r\n\r\n    $ ./processing-py.sh path/to/mysketch.py\r\n\r\nor using your own Java runtime environment:\r\n\r\n\t$ java -jar processing-py.jar path/to/mysketch.py\r\n\r\n## Documentation ##\r\n\r\nTo learn Processing.py check out these resources:\r\n\r\n  * Built-in [Processing 2.0 functions](http://processing.org/reference/) for rendering and interaction.\r\n  * The [Python 2.7 documentation](http://docs.python.org/2/index.html).\r\n  * And of course the [Java 7 API documentation](http://docs.oracle.com/javase/7/docs/api/).\r\n\r\nProcessing.py comes with many [examples](https://github.com/jdf/processing.py/tree/master/examples.py), most of which are exactly like the\r\nexample sketches that come with Processing, but converted to Python.\r\n\r\n    $ processing-py.sh examples.py/Basics/Math/noisefield.py\r\n    $ processing-py.sh examples.py/Library/OpenGL/SpaceJunk.py\r\n    $ processing-py.sh examples.py/3D/Typography/KineticType.py\r\n    $ processing-py.sh examples.py/3D/Textures/TextureCube.py\r\n\r\n## Using Processing Libraries ##\r\n\r\nProcessing.py is implemented in Java, and is designed to be compatible with the existing ecosystem of [Processing libraries](http://processing.org/reference/libraries/).\r\n\r\n* Put processing extension libraries in the `libraries` subdirectory of your processing.py installation. Processing.py will search every jar file and directory beneath that special directory, so you don't need to be too fussy about where things go. Just unzip Processing libraries right there.\r\n\r\n* Import the library in one of the usual Python ways, as in these snippets:\r\n\r\n        from peasy import PeasyCam\r\n        # or\r\n        import peasy.PeasyCam\r\n        # or\r\n        import peasy.PeasyCam as PeasyCam\r\n\r\n    Unfortunately, `from foo import *` is not supported.\r\n\r\n* Then, in your `setup()` method:\r\n\r\n        cam = PeasyCam(this, 200)\r\n\r\n  Many libraries need a reference to \"the current PApplet\", and that's what\r\n  `this` is for. Of course, there's no such thing as `this` in Python; it's just something that processing.py provides for you for compatibility with such libraries.\r\n\r\n## Included Libraries ##\r\n\r\nSome Processing libraries may not work with processing.py right out of the box. In particular, any library that uses Java reflection to call specially-named functions in your sketch will not work. However, we're happy to modify processing.py to work with any of the official Processing libraries. Here are the libraries that have required special handling in processing.py, and are included in the processing.py download:\r\n\r\n  * [Fisica](http://www.ricardmarxer.com/fisica/), by [Ricard Marxer](http://www.ricardmarxer.com/). Included under the terms of the LGPLv3, and with the kind cooperation of Mr. Marxer. See [examples.py/Fisica](https://github.com/jdf/processing.py/tree/master/examples.py/Fisica) for examples.\r\n\r\nIf you find that some Processing library doesn't work as expected with processing.py, please let us know in the [bug tracker](http://github.com/jdf/processing.py/issues).\r\n\r\n## FAQ ##\r\n\r\n  * __How do I report bugs or request new features?__\r\n\r\n    Please report any issue in the [bug tracker](http://github.com/jdf/processing.py/issues).\r\n\r\n  * __How can I create a launcher for my sketch?__\r\n\r\n    Add these lines near the top of your script:\r\n\r\n        import launcher\r\n        launcher.create()\r\n\r\n  * __How should I load data?__\r\n\r\n    [Tentative] Along with the launcher, consider using `pwd()` for file paths. For a given argument it resolves the path for an object relative to the currently running script:\r\n\r\n        data = load(pwd(\"data.txt\"))\r\n\r\n    In that case, processing.py will try to search `data.txt` always where your script resides.\r\n\r\n  * __How can I use Ani, or any other library that modifies fields?__\r\n\r\n    Some libraries such as [Ani](http://www.looksgood.de/libraries/Ani/) require you to specify a variable name for animation. Unfortunately they cannot access Python variables directly (and Java's built in classes are immutable).\r\n\r\n    To solve this problem we instead create a mutable `PrimitiveFloat` object. This object has a field `.value`, which you can use for these purposes.\r\n\r\n        import jycessing.primitives.PrimitiveFloat as Float\r\n        x = Float(100.0)\r\n        Ani.to(x, 200, \"value\", 50);  # \"value\" is the name of the Float's internal field\r\n\r\n    In case you need other primitive values, please [let us know](http://github.com/jdf/processing.py/issues)!\r\n\r\n  * __Why was this project created?__\r\n\r\n    I ([Jonathan](http://MrFeinberg.com/)) recently gave a talk about Processing to a group of rather bright 8th-graders,\r\n    as part of a computer-programming summer camp they were attending at my office.\r\n    Their curriculum up to that point had been in Python, which is an eminently\r\n    sensible choice, given the\r\n    [pedagogical roots](http://en.wikipedia.org/wiki/ABC_%28programming_language%29)\r\n    of the language.\r\n\r\n    The kids were really turned on by the demos--I showed them the\r\n    [white glove](http://whiteglovetracking.com/), and\r\n    [Golan Levin](http://flong.com/)'s\r\n    [New Year's cards](http://www.flong.com/storage/experience/newyear/newyear10/)--but\r\n    they were bogged down by Processing's C-like syntax, which really seems arcane\r\n    and unnecessarily complex when you're used to Python.\r\n\r\n    I shared my experience with Processing creators\r\n    [Ben Fry](http://benfry.com/) and [Casey Reas](http://reas.com/), and they\r\n    told me that, indeed, the original Processing was a fork of\r\n    [\"Design By Numbers\"](http://dbn.media.mit.edu/), with Python and Scheme\r\n    support hacked in. Support for a multi-lingual programming\r\n    environment was always part of the plan, so they were enthusiastic\r\n    about any new attempt at the problem.\r\n\r\n    I was able to hack up a proof of concept in a couple of hours, and have\r\n    managed to create something worth sharing in a couple of weeks. I was only\r\n    able to do it at all thanks to the brilliant and beautiful\r\n    [Jython](http://www.jython.org/) project.\r\n\r\n    At the time of Processing's first public release, August of 2001,\r\n    Jython was too young a project to be used in this way. But now, having done\r\n    absolutely no work to profile and optimize, I can get hundreds of frames\r\n    per second of 3D graphics on my linux box. So, kudos to the Processing\r\n    project, and kudos to Jython!\r\n\r\n\r\n## Credits ##\r\n\r\nWritten by [Jonathan Feinberg](http://mrfeinberg.com) &lt;[jdf@pobox.com](mailto:jdf@pobox.com)&gt;\r\nLauncher & many improvements by [Ralf Biedert](http://xr.io) &lt;[rb@xr.io](mailto:rb@xr.io)&gt;\r\n\r\nAlso, [YourKit, LLC](http://www.yourkit.com) was so kind to sponsor a license for their excellent [YourKit Java Profiler](http://www.yourkit.com/java/profiler/index.jsp). Thank you very much!\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}